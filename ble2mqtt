#! /usr/bin/python3

from service.ble_scanner import BleScanner
import argparse
from service.logger import LoggerWrapper
from service.mqtt_reporter import MqttReporter

"""
    Scans for new BLE devices. Reports it to server immediately if new devices is discovered
    or after a delay if device leaves scanner range.
"""

parser = argparse.ArgumentParser()
parser.add_argument("--name", help="Scanner name", required=True)
parser.add_argument("--server", help="Central server ip address", required=True)
parser.add_argument("--port", help="Server port", default=1883, type=int)
parser.add_argument("--user", help="Username")
parser.add_argument("--password", help="Password")
parser.add_argument("--timeout", help="Server timeout in seconds", default=15, type=int)
parser.add_argument("--log", help="Log to file")
parser.add_argument("--error-log", help="Log errors to file")

args = parser.parse_args()

mqtt = MqttReporter(server=args.server, port=args.port, credentials=(args.user, args.password))
logger = LoggerWrapper(file=args.log)

# Scans bluetooth for ble devices

try:
    scanner = BleScanner(
        reporter=mqtt,  # used for immediate reporting of new ble devices
        scanner_name=args.name,
        timeout=args.timeout
    )
    scanner.scan()

except (KeyboardInterrupt, SystemExit):
    logger.warning("Waiting for scanner shutdown")

except Exception as e:
    logger.error("[ERR] %s" % e)
    error_log = LoggerWrapper(args.error_log)
    error_log.error(e)
